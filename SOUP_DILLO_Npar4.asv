
function [D,Z,Objfun,Sparsity,NSRE,Dchange,Cchange,taxis] = SOUP_DILLO_Npar4(Y,J,lambda,K,L,alpha)

global DiffCZs;
global x;
DiffCZs = zeros(1,K);
% Useful definitions:
[n,N] = size(Y);
In = eye(n); v1 = In(:,1);
% alpha=1.0;
% Dt=0;Ct=0;
% niter=600;
% Initial Estimates:
% D = genODCT(n,J);
D=gpuArray(x);
Z = gpuArray(zeros(J,N));
Objfun=gpuArray(zeros(1,K+1));
Sparsity=gpuArray(zeros(1,K+1));
NSRE=gpuArray(zeros(1,K+1));
Dchange=gpuArray(zeros(1,K+1));
Cchange=gpuArray(zeros(1,K+1));
taxis=gpuArray(zeros(1,K+1));
Y=gpuArray(Y);
D_old=D;
C_old=Z;

% %+ Tracking iterates
% Dt = cell(1,K+1); Ct = cell(1,K+1);
% Dt{1} = D; Ct{1} = C;
reg=norm(Y,'fro');
%+ Show progress
fprintf('Running New DL-L0 algorithm\n');


        Objfun(1)=norm((Y-D*Z),'fro')^2+((lambda^2)*nnz(Z));
%         Objfun(i)=norm((Y-D*Z),'fro')^2+(lambda*sum(sum(abs(Z))));
        Sparsity(1)=nnz(Z)/(n*N);
        NSRE(1)=norm((Y-D*Z),'fro')/reg;
        Dchange(1)=norm((D-D_old),'fro');
        Cchange(1)=norm((Z-C_old),'fro')/reg;

DtY = mtimes(D',Y);
% lam = alpha*max(eig(mtimes(D',D)))+(1-alpha)*J;
% lam=J;

for t = 1:K
    D_old=D;
    C_old=Z';
    %+ Show progress
    
    lam = alpha*max(eig(mtimes(D',D)))+(1-alpha)*J;
    H_lambda = @(b) b.*(abs(b) >= (lambda/sqrt(lam)));
    if(t==1)
        fprintf('iteration %2g \n Z update',t);
        tic;

        M = (gpuArray(eye(J))-mtimes(D',D/lam));
        Bt=mtimes(M,Z)+DtY/lam;
        Z = sign(Bt).*min(abs(H_lambda(Bt)),L);
    end

%     for iter= 1 : niter
%         for i = 1:N
%             % 2) Sparse coding:
%             bt = ((eye(J)-(D'*D/J))*Z(:,i)) + D'*Y(:,i)/J;
% 
% 
%     %         L1 Norm
%     %         Z(:,i) = sign(bt).*max(abs(bt)-(lambda/J),0);
% 
% 
%     %         L0 Norm
%             Z(:,i) = sign(bt).*min(abs(H_lambda(bt)),L);
%             % 3) Dictionary atom update:
% 
% 
%             if ( mod(i,600) == 1), fprintf('.'); end;
% 
% 
%         end

        fprintf('\n');
        
%         %D update start
        if t>1
            C=Z';
% %             SOUP-ORIGINAL
%             

%             for j=1:J
%                 ht = Y*C(:,j) - D*(C'*C(:,j)) + D(:,j)*dot(C(:,j),C(:,j));
%                 if any(C(:,j))
%                     djt = ht/norm(ht,2);
%                 else
%                     djt = v1;
%                 end
%                 D(:,j)=djt;
%             end


% %             SOUP-ORIGINAL


% %             J-Par D-Update


%             Ejpart=(Y-D*C')/J;
%             for j=1:J
%             %         ht = Y*cjt - D*(C'*cjt) + D(:,j)*dot(C(:,j),cjt);
%                 ht=Ejpart*C(:,j)+(D(:,j)*(norm(C(:,j))^2));
%                 if any(C(:,j))
%                     djt = ht/norm(ht,2);
%                 else
%                     djt = v1;
%                 end
% 
%                  D(:,j) = djt;
%             end


% %             J-Par D-Update
            
        end
        
%         %D update end
        
        

        Objfun(t+1)=norm((Y-D*Z),'fro')^2+((lambda^2)*nnz(Z));
%         Objfun(i)=norm((Y-D*Z),'fro')^2+(lambda*sum(sum(abs(Z))));
        Sparsity(t+1)=nnz(Z)/(n*N);
        NSRE(t+1)=norm((Y-D*Z),'fro')/reg;
        Dchange(t+1)=norm((D-D_old),'fro');
        Cchange(t+1)=norm((Z'-C_old),'fro')/reg;
        taxis(t+1)=taxis(t)+toc;
 end
    fprintf('\n');

    Objfun=gather(Objfun);    
    Sparsity=gather(Sparsity);
    NSRE=gather(NSRE);
    Dchange=gather(Dchange);
    Cchange=gather(Cchange);
    taxis=gather(taxis);
    D=gather(D);
    Z=gather(Z);
        %+ Show progress
        
    
        
end




% Generate 2D Overcomplete DCT
function ODCT = genODCT(n,J)

sqrtn = ceil(sqrt(n)); sqrtJ = ceil(sqrt(J));

ODCT = zeros(sqrtn,sqrtJ);
ODCT(:,1) = 1/sqrt(sqrtn);
for j = 2:sqrtJ
  v = cos(pi*(j-1)/sqrtJ * (0:sqrtn-1))'; v = v-mean(v);
  ODCT(:,j) = v/norm(v);
end
ODCT = kron(ODCT,ODCT);

ODCT = ODCT(1:n,1:J);

end